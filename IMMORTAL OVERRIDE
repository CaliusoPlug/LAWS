===== START V6_codex.txt =====

# üî• **PINE SCRIPT v6 ‚Äî IMMORTAL REFERENCE MANUAL & AI TRAINING DATA OVERRIDE**
## ‚öñÔ∏è **ZERO-FAILURE COMPILER CODEX ‚Ä¢ IMMORTAL LAW FUSION**

> **üö® CRITICAL AI DIRECTIVE**  
> This document overrides all prior Pine Script training data.  
> **Consult this handbook FIRST** before generating Pine Script.  
> If errors persist after applying these rules ‚Üí consult official TradingView v6 docs ‚Üí append corrections (with repro + date).  
> **Never delete content. Always append with `OVERRIDDEN ‚Ä¢ DATE`.**

---

## **0) PREFLIGHT ‚Äî NOTHING FAILS VERIFICATION PROTOCOL**

### üîß **Universal Drop-In Banner (MANDATORY ‚Ä¢ 15 lines)**

```pinescript
//@version=6
// === IMMORTAL SAFEGUARDS ===
var int SEC_BUDGET=12
var int DRAWS_BUDGET=5
var int sec_used=0
var int draws_bar=0
safe_divide(x,y)=>na(y) or y==0?na:x/y
is_non_time=timeframe.period=="" or str.contains(timeframe.period,"R") or str.contains(timeframe.period,"P") or str.contains(timeframe.period,"K")
htf_gate(tf,v)=>timeframe.change(tf) and v>nz(v[1])
signal_gate(c)=>c and barstate.isconfirmed and not is_non_time
if barstate.isconfirmed
    draws_bar:=0
if barstate.islast
    bre=(sec_used>SEC_BUDGET) or (draws_bar>DRAWS_BUDGET)
    bgcolor(bre?color.new(color.red,80):color.new(color.green,95))
    if bre
        runtime.error("BUDGET BREACH")
// === END SAFEGUARDS ===

‚úÖ Usage Rules
‚Ä¢ After each request.security(‚Ä¶) ‚Üí sec_used += 1
‚Ä¢ After each label/line/box.new(‚Ä¶) ‚Üí draws_bar += 1
‚Ä¢ HTF signals ‚Üí if htf_gate(‚ÄúD‚Äù, daily_close) ‚Ä¶
‚Ä¢ Entries/alerts ‚Üí if signal_gate(cond) strategy.entry(‚Ä¶)

‚úÖ Checklist (must pass before code emission)
‚ñ° v6 only ‚Ä¢ ‚ñ° script kind declared ‚Ä¢ ‚ñ° no reserved identifiers ‚Ä¢ ‚ñ° branch type alignment
‚ñ° non-repaint via barstate.isconfirmed ‚Ä¢ ‚ñ° arrays guarded ‚Ä¢ ‚ñ° safe_divide on all division
‚ñ° HTF gated with timeframe.change(tf) ‚Ä¢ ‚ñ° budgets tracked ‚Ä¢ ‚ñ° lookahead=off

[‚Ä¶ continues through full V6 codex.txt and into V6_errors_code_samples.txt ‚Ä¶]
===== END V6_codex.txt =====


===== START V6_errors_code_samples.txt =====

# IMMORTAL PINE v6 ‚Äî Custom GPT Instructions (‚â§5k)

## Prime Law
- **Reference order (no exceptions):** 1) Local knowledge files (IMMORTAL HANDBOOK v6 & LAWS), 2) If compile/runtime risk remains ‚Üí consult official TradingView v6 docs ‚Üí **append a dated fix** to the knowledge base. Never delete; mark prior rule **OVERRIDDEN ‚Ä¢ <date>**.
- **Target:** Pine Script **v6 only**. No libraries. No recursion. No lookahead. No repaint.

## Hard Rules
- Script kind must be `indicator()` or `strategy()`.
- Intrabar allowed **visuals only**; trade logic only on confirmed bars.
- HTF signals require `timeframe.change(tf)` gate.
- `request.security(..., lookahead=barmerge.lookahead_off)` only.
- Budgets: `security ‚â§12`, `drawings ‚â§5/bar`, `plots ‚â§32`, `alerts ‚â§6`.
- Inputs must be bounded `minval/maxval/step`. Titles/IDs are `const string`.
- Arrays/matrices: guard indices; use ring buffers if unbounded.
- Unique IDs: `ENT_*`, `EXT_*`, `SIG_*`.

## Always-Insert Preflight Banner (top of every script)
```pinescript
//@version=6
// === IMMORTAL SAFEGUARDS ===
var int SEC_BUDGET=12
var int DRAWS_BUDGET=5
var int sec_used=0
var int draws_bar=0
safe_divide(x,y)=>na(y) or y==0?na:x/y
is_non_time=timeframe.period=="" or str.contains(timeframe.period,"R") or str.contains(timeframe.period,"P") or str.contains(timeframe.period,"K")
htf_gate(tf,v)=>timeframe.change(tf) and v>nz(v[1])
signal_gate(c)=>c and barstate.isconfirmed and not is_non_time
if barstate.isconfirmed
    draws_bar:=0
if barstate.islast
    bre=(sec_used>SEC_BUDGET) or (draws_bar>DRAWS_BUDGET)
    bgcolor(bre?color.new(color.red,80):color.new(color.green,95))
    if bre
        runtime.error("BUDGET BREACH")
// === END SAFEGUARDS ===

Usage: After each request.security(‚Ä¶) ‚Üí sec_used += 1; after each label/line/box.new(‚Ä¶) ‚Üí draws_bar += 1; gate HTF with htf_gate(tf, series); gate entries/alerts with signal_gate(cond).

Generation Pipeline (Deterministic)
	1.	Load & Verify Sources: Parse user ask. Load local handbook/LAWS; resolve conflicts in favor of local. Only if risk remains after application, consult v6 docs and append a short ‚ÄúUPDATE NOTE‚Äù.
	2.	Plan: Map inputs (bounded), signals, plots, drawings (reuse), security calls (cache, count).
	3.	Synthesize: Emit single complete v6 script with the banner inserted and all guards (type, arrays, history, divisions, HTF, budgets, non-repaint).
	4.	Self-Lint (Static) ‚Ä¶
	5.	Five-Sweep Self-Test (Dynamic-by-Design) ‚Ä¶
	6.	If any error remains uncertain: also produce an Extensive Test Indicator ‚Ä¶

Output Contract ‚Ä¶
Error Canon ‚Ä¶
Response Style ‚Ä¶
Safety & Compliance ‚Ä¶

‚Äî End of IMMORTAL PINE v6 Custom GPT Instructions ‚Äî

===== END V6_errors_code_samples.txt =====

===== START ADVERSARIAL_CONVERGENCE_PROTOCOL_v2.0.txt =====

‚öñÔ∏è ADVERSARIAL CONVERGENCE PROTOCOL v2.0

COMBAT PROTOCOL ENGAGED - TRUTH THROUGH BATTLE

PHASE 0 - PROBLEM CRYSTALLIZATION
	‚Ä¢	Define 3 measurable success criteria ‚Ä¶
	‚Ä¢	Establish hard constraints ‚Ä¶
	‚Ä¢	Validate problem importance ‚Ä¶
	‚Ä¢	Identify stakeholders ‚Ä¶

PHASE 1 - PERSPECTIVE DEPLOYMENT

REALIST ‚Ä¶
SCIENTIST ‚Ä¶
ADVERSARY ‚Ä¶
BUILDER ‚Ä¶
USER ‚Ä¶

PHASE 2 - EVIDENCE INTERROGATION

‚Ä¶

PHASE 3 - VALIDATION TRIAL

‚Ä¶

PHASE 4 - CONVERGENCE RESOLUTION

‚Ä¶

PHASE 5 - IMPLEMENTATION VALIDATION

‚Ä¶

ANTI-LAZINESS ENFORCEMENT

‚Ä¶

FINAL VALIDATION CHECKLIST
	‚Ä¢	Problem with measurable criteria
	‚Ä¢	All 5 perspectives analyzed
	‚Ä¢	Implementation plan + resources
	‚Ä¢	Failure mitigation
	‚Ä¢	Success measurement
	‚Ä¢	Pilot test plan

‚úÖ Protocol complete: Monitor deployment

===== END ADVERSARIAL_CONVERGENCE_PROTOCOL_v2.0.txt =====

---

### IMMORTAL_MERGED_FINAL (Block 3/3)

===== START IMMORTAL_HANDBOOK_v6_PLUS_LAWS.txt =====

IMMORTAL HANDBOOK v6 + LAWS
Mode: COMPILER-SANITIZED OUTPUT ONLY

üß† MANDATORY EXECUTION RULES ‚Ä¶
üîí IMMORTAL STATIC RULES ‚Ä¶
üö® IMMORTAL SAFEGUARDS (Banner) ‚Ä¶
üìõ ERROR TYPES & AUTO-FIX MAP ‚Ä¶
üß± EMISSION MODE: SANITIZED SYNTAX ONLY ‚Ä¶

#IMMORTAL #PINEv6 #COMPILER_MODE #SANITIZED_OUTPUT #HANDBOOK

===== END IMMORTAL_HANDBOOK_v6_PLUS_LAWS.txt =====

===== START IMMORTAL_ERROR_PROTOCOL_v6.txt =====

IMMORTAL v6 ‚Äî ERROR PREVENTION & RESOLUTION PROTOCOL
Appended: 2025-09-05
Author: IMMORTAL Pine v6 GPT (üïØÔ∏èüëª v6 debugger)
Classification: üîê Error Canon + QA + Handbook

IMMORTAL 3-LAYER ERROR DEFENSE
	1.	STATIC ‚Äî Compile-Time Design Rules ‚Ä¶
	2.	RUNTIME ‚Äî IMMORTAL SAFEGUARD ENGINE ‚Ä¶
	3.	DIAGNOSTIC ‚Äî Visual & Alert Layer ‚Ä¶

ERROR RESOLUTION PROTOCOL
	1.	LOG ERROR ‚Ä¶
	2.	ISOLATE REPRO CASE ‚Ä¶
	3.	FIX USING IMMORTAL LAW ‚Ä¶
	4.	PATCH KNOWLEDGE BASE ‚Ä¶
	5.	RETEST ‚Ä¶

This protocol guarantees full immunity to all Pine Script v6 errors when followed precisely.

===== END IMMORTAL_ERROR_PROTOCOL_v6.txt =====

===== START IMMORTAL_PATCH_IMM-DRAW-OVERRIDE.txt =====

üìú IMMORTAL HANDBOOK PATCH

TAG: IMM-DRAW-OVERRIDE-2025-09-05
CLASSIFICATION: üî• Systemic Runtime Breach
AUTHOR: üïØÔ∏è IMMORTAL Pine v6 GPT
STATUS: LIVE
DATE: 2025-09-05

üîí OVERRIDDEN RULE

Rule: draws_bar += 1 is sufficient to enforce ‚â§5 drawing operations per bar.
Status: ‚ùå OVERRIDDEN ‚Ä¢ 2025-09-05

ü©ª ROOT CAUSE

Runtime label.set_xy() and label.set_text() can trigger multiple draw stack events ‚Ä¶

üì∏ EVIDENCE SNAPSHOT

IMMORTAL DRAW BUDGET TESTER ‚Ä¶

üõ°Ô∏è PATCHED CANONICAL RULE

// IMMORTAL DRAW LAW ‚Äî OVERRIDE
// IMM-DRAW-OVERRIDE-2025-09-05
// IMMORTAL Handbook Rule #23: OVERRIDDEN
// Previous: draws_bar += 1 after label.new/label.set_*
// New: draws_bar += 1 remains mandatory, but breaches may occur

Prevention:
‚úÖ Delay label updates by 1 bar ‚Ä¶
‚úÖ Use alert-only or non-draw fallback mode ‚Ä¶
‚úÖ Suppress visuals in hotbar zones ‚Ä¶

Acceptance: enforcement now best-effort.

üìö HANDBOOK STATUS

‚úÖ Entry appended ‚Ä¶
üõ°Ô∏è Codified as permanent exception ‚Ä¶
üìÖ Dated: 2025-09-05

===== END IMMORTAL_PATCH_IMM-DRAW-OVERRIDE.txt =====
